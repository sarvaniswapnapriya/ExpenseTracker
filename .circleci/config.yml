version: 2.1

executors:
  python-executor:
    docker:
      - image: circleci/python:3.8
    working_directory: ~/expense_tracker

jobs:
  lint:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Install Node.js
          command: |
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs

      - run:
          name: Lint JavaScript code
          command: npm run lint

  build:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Install Node.js
          command: |
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs

      - run:
          name: Install dependencies
          command: npm install

      - run:
          name: Run tests
          command: npm test

      - run:
          name: Check for vulnerabilities
          command: npm audit --production

  terraform:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Install Terraform
          command: |
            curl -LO https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip
            unzip terraform_1.5.0_linux_amd64.zip
            sudo mv terraform /usr/local/bin/
            terraform --version

      - run:
          name: Terraform init
          command: terraform init
          working_directory: infrastructure/

      - run:
          name: Terraform plan
          command: terraform plan
          working_directory: infrastructure/

      - run:
          name: Terraform apply (development)
          when: on_success
          command: terraform apply -auto-approve
          working_directory: infrastructure/
          environment:
            AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
            AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY

  docker:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Login to AWS ECR
          command: |
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY

      - run:
          name: Build and tag Docker image
          command: |
            IMAGE_TAG=$(echo $CIRCLE_SHA1 | cut -c1-7)
            docker build -t $ECR_REGISTRY/my-app:latest .

      - run:
          name: Push Docker image to AWS ECR
          command: |
            IMAGE_TAG=$(echo $CIRCLE_SHA1 | cut -c1-7)
            docker push $ECR_REGISTRY/my-app:$IMAGE_TAG

  deploy:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Deploy to Development
          when: << pipeline.parameters.deploy_to_development >>
          command: |
            echo "Deploying to development environment"
            # Your deployment script here

      - run:
          name: Deploy to Staging
          when: << pipeline.parameters.deploy_to_staging >>
          command: |
            echo "Deploying to staging environment"
            # Your deployment script here

      - run:
          name: Deploy to Production
          when: << pipeline.parameters.deploy_to_production >>
          command: |
            echo "Deploying to production environment"
            # Your deployment script here

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - lint
      - build:
          requires:
            - lint
      - terraform:
          requires:
            - build
      - docker:
          requires:
            - terraform
      - deploy:
          requires:
            - docker
